Index: doc/blackbox.1.in
===================================================================
RCS file: /cvsroot/blackboxwm/blackbox/doc/blackbox.1.in,v
retrieving revision 1.4
diff -u -r1.4 blackbox.1.in
--- doc/blackbox.1.in	18 Sep 2002 17:47:55 -0000	1.4
+++ doc/blackbox.1.in	11 Jan 2009 16:01:46 -0000
@@ -651,6 +651,21 @@
 can be used to include the system menu or include a
 piece of menu that is updated by a separate program.
 .TP
+.BI "[include-sub]" "  (filename) {submenu name}"
+This command inserts
+.I filename
+into new sub-menu with the name
+.I submenu name
+at point at which it is called.
+This command have same effect as including file with
+submenu. The main difference is in processing. Include
+reads file only once, when menu is parsed.
+File
+.I filename
+is readed everytime submenu is opened. This allows
+to generate dynamic menus with commands/scripts
+(filename begins with |).
+.TP
 .BI "[stylesdir]" "  (description) (path)"
 Causes Blackbox to search 
 .I path
Index: lib/Menu.cc
===================================================================
RCS file: /cvsroot/blackboxwm/blackbox/lib/Menu.cc,v
retrieving revision 1.69
diff -u -r1.69 Menu.cc
--- lib/Menu.cc	27 Jan 2005 17:08:22 -0000	1.69
+++ lib/Menu.cc	11 Jan 2009 16:01:46 -0000
@@ -1159,6 +1159,10 @@
   return _rect;
 }
 
+const std::string &bt::Menu::applicationName(void) const {
+  return _app.applicationName(); 
+}
+
 
 unsigned int bt::Menu::verifyId(unsigned int id) {
   if (id != ~0u) {
Index: lib/Menu.hh
===================================================================
RCS file: /cvsroot/blackboxwm/blackbox/lib/Menu.hh,v
retrieving revision 1.29
diff -u -r1.29 Menu.hh
--- lib/Menu.hh	24 Jan 2005 09:06:11 -0000	1.29
+++ lib/Menu.hh	11 Jan 2009 16:01:46 -0000
@@ -263,6 +263,8 @@
 
     Rect geometry(void) const;
 
+    const std::string &applicationName(void) const;
+
   private:
     void updateSize(void);
     void updatePixmaps(void);
Index: src/Rootmenu.cc
===================================================================
RCS file: /cvsroot/blackboxwm/blackbox/src/Rootmenu.cc,v
retrieving revision 1.29
diff -u -r1.29 Rootmenu.cc
--- src/Rootmenu.cc	3 Jan 2005 09:42:53 -0000	1.29
+++ src/Rootmenu.cc	11 Jan 2009 16:01:46 -0000
@@ -27,6 +27,9 @@
 
 #include <Unicode.hh>
 
+#include <sys/types.h>
+#include <sys/stat.h>
+
 
 Rootmenu::Rootmenu(bt::Application &app, unsigned int screen, BScreen *bscreen)
   : bt::Menu(app, screen), _bscreen(bscreen) { }
@@ -80,3 +83,46 @@
     return;
   } // switch
 }
+
+void LazyRootMenu::hide(void)
+{
+  Rootmenu::hide();
+  clear();
+}
+
+void LazyRootMenu::refresh(void)
+{
+  clear();
+  if (_bscreen != NULL) {
+    FILE *submenufile = _pipe_menu
+                        ? popen(_menu_file.c_str(), "r")
+                        : fopen(_menu_file.c_str(), "r");
+
+    if (! submenufile) {
+      perror(_menu_file.c_str());
+      Rootmenu::refresh();
+      return;
+    }
+
+    struct stat buf;
+    if (!_pipe_menu
+        && (fstat(fileno(submenufile), &buf) || ! S_ISREG(buf.st_mode))) {
+      fprintf(stderr, "%s: [include-sub] error: '%s' is not a regular file\n",
+              applicationName().c_str(), _menu_file.c_str());
+      fclose(submenufile);
+      Rootmenu::refresh();
+      return;
+    }
+
+    if (! feof(submenufile)) {
+      _bscreen->parseMenuFile(submenufile, this);
+
+      if (_pipe_menu)
+        pclose(submenufile);
+      else
+        fclose(submenufile);
+    }
+  }
+  Rootmenu::refresh();
+}
+
Index: src/Rootmenu.hh
===================================================================
RCS file: /cvsroot/blackboxwm/blackbox/src/Rootmenu.hh,v
retrieving revision 1.14
diff -u -r1.14 Rootmenu.hh
--- src/Rootmenu.hh	3 Jan 2005 09:42:53 -0000	1.14
+++ src/Rootmenu.hh	11 Jan 2009 16:01:46 -0000
@@ -46,8 +46,8 @@
 protected:
   void itemClicked(unsigned int id, unsigned int);
 
-private:
   BScreen *_bscreen;
+private:
 
   struct _function {
     _function(unsigned int f, const std::string &s) : func(f), string(s) { }
@@ -58,4 +58,21 @@
   FunctionMap _funcmap;
 };
 
+// Lazy loaded root menu
+class LazyRootMenu : public Rootmenu
+  {
+  public:
+    LazyRootMenu(bt::Application &app, unsigned int screen, BScreen *bscreen,
+        const std::string &menu_file, bool pipe_menu) :
+          Rootmenu(app, screen, bscreen), _menu_file(menu_file)
+      {
+      _pipe_menu = pipe_menu;
+      }
+    virtual void hide(void);
+    virtual void refresh(void);
+  private:
+    bool _pipe_menu;
+    std::string _menu_file;
+  };
+
 #endif // __Rootmenu_hh
Index: src/Screen.cc
===================================================================
RCS file: /cvsroot/blackboxwm/blackbox/src/Screen.cc,v
retrieving revision 1.309
diff -u -r1.309 Screen.cc
--- src/Screen.cc	23 Apr 2008 05:48:07 -0000	1.309
+++ src/Screen.cc	11 Jan 2009 16:01:47 -0000
@@ -1571,6 +1571,24 @@
 
       break;
 
+    case 1115: { // include-sub
+      if (! *label) {
+        fprintf(stderr, "%s: [include-sub] error, no filename defined\n",
+                _blackbox->applicationName().c_str());
+        continue;
+      }
+
+      bool pipe_menu = label[0] == '|';
+      std::string newfile = bt::expandTilde(pipe_menu ? label + 1 : label);
+
+      LazyRootMenu *submenu = new LazyRootMenu(*_blackbox,
+          screen_info.screenNumber(), this, newfile, pipe_menu);
+      submenu->showTitle();
+      submenu->setTitle(bt::toUnicode(command));
+      menu->insertItem(bt::toUnicode(command), submenu);
+      }
+      break;
+
     case 767: { // submenu
       if (! *label) {
         fprintf(stderr, "%s: [submenu] error, no menu label defined\n",
Index: src/Screen.hh
===================================================================
RCS file: /cvsroot/blackboxwm/blackbox/src/Screen.hh,v
retrieving revision 1.124
diff -u -r1.124 Screen.hh
--- src/Screen.hh	18 Oct 2005 07:34:46 -0000	1.124
+++ src/Screen.hh	11 Jan 2009 16:01:47 -0000
@@ -49,6 +49,7 @@
 class Windowmenu;
 class Workspace;
 class Workspacemenu;
+class LazyRootMenu;
 
 namespace bt {
   class ScreenInfo;
@@ -94,6 +95,7 @@
   void updateGeomWindow(void);
 
   bool parseMenuFile(FILE *file, Rootmenu *menu);
+  friend class LazyRootMenu;
 
   void InitMenu(void);
   void LoadStyle(void);

 	  	 
