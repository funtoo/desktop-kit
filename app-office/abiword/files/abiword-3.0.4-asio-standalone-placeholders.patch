--- a/plugins/collab/backends/service/xp/RealmConnection.cpp
+++ b/plugins/collab/backends/service/xp/RealmConnection.cpp
@@ -348,7 +348,7 @@
 	boost::shared_ptr<std::string> msg_ptr(new std::string(1, '\0'));
 	asio::async_read(m_socket, asio::buffer(&(*msg_ptr)[0], msg_ptr->size()),
 		boost::bind(&RealmConnection::_message, shared_from_this(),
-			asio::placeholders::error, asio::placeholders::bytes_transferred, msg_ptr));
+			boost::placeholders::_1, boost::placeholders::_2, msg_ptr));
 }
 
 void RealmConnection::_message(const asio::error_code& e, std::size_t /*bytes_transferred*/, boost::shared_ptr<std::string> msg_ptr)
@@ -392,7 +392,7 @@
 			char* ptr = m_buf.prepare(bytes_needed);
 			asio::async_read(m_socket, asio::buffer(ptr, bytes_needed),
 							boost::bind(&RealmConnection::_complete, shared_from_this(),
-								asio::placeholders::error, asio::placeholders::bytes_transferred, packet_ptr)
+								boost::placeholders::_1, boost::placeholders::_2, packet_ptr)
 							);
 			break;
 	}
--- a/plugins/collab/backends/service/xp/ServiceAccountHandler.cpp
+++ b/plugins/collab/backends/service/xp/ServiceAccountHandler.cpp
@@ -1709,7 +1709,7 @@
 							boost::shared_ptr<rpv1::SessionTakeOverPacket> stop(new rpv1::SessionTakeOverPacket());
 							rpv1::send(*stop, connection->socket(), 
 									boost::bind(&ServiceAccountHandler::_write_result, this,
-										asio::placeholders::error, asio::placeholders::bytes_transferred, connection,
+										boost::placeholders::_1, boost::placeholders::_2, connection,
 											boost::static_pointer_cast<rpv1::Packet>(stop))	
 								);
 
--- a/plugins/collab/backends/service/xp/ServiceAccountHandler.h
+++ b/plugins/collab/backends/service/xp/ServiceAccountHandler.h
@@ -149,7 +149,7 @@
 	{
 		realm::protocolv1::send(*packet, recipient->connection()->socket(),
 			boost::bind(&ServiceAccountHandler::_write_handler, this,
-							asio::placeholders::error, asio::placeholders::bytes_transferred, recipient,
+							boost::placeholders::_1, boost::placeholders::_2, recipient,
 							boost::static_pointer_cast<rpv1::Packet>(packet)));
 	}
 
--- a/plugins/collab/backends/service/xp/tls_tunnel.cpp
+++ b/plugins/collab/backends/service/xp/tls_tunnel.cpp
@@ -152,7 +152,7 @@
 
 void ServerTransport::accept() {
 	socket_ptr_t socket_ptr(new asio::ip::tcp::socket(io_service()));
-	acceptor_.async_accept(*socket_ptr, boost::bind(&ServerTransport::on_accept, this, asio::placeholders::error, socket_ptr));
+	acceptor_.async_accept(*socket_ptr, boost::bind(&ServerTransport::on_accept, this, boost::placeholders::_1, socket_ptr));
 }
 
 void ServerTransport::on_accept(const asio::error_code& error, socket_ptr_t socket_ptr) {
@@ -241,7 +241,7 @@
 
 	local_socket_ptr->async_receive(
 			asio::buffer(&(*local_buffer_ptr)[0], local_buffer_ptr->size()),
-			boost::bind(&Proxy::on_local_read, this, asio::placeholders::error, asio::placeholders::bytes_transferred,
+			boost::bind(&Proxy::on_local_read, this, boost::placeholders::_1, boost::placeholders::_2,
 					transport_ptr, session_ptr, local_socket_ptr, local_buffer_ptr, remote_socket_ptr)
 		);
 }
@@ -279,7 +279,7 @@
 {
 	local_socket_ptr->async_receive(
 			asio::buffer(&(*local_buffer_ptr)[0], local_buffer_ptr->size()),
-			boost::bind(&Proxy::on_local_read, this, asio::placeholders::error, asio::placeholders::bytes_transferred, 
+			boost::bind(&Proxy::on_local_read, this, boost::placeholders::_1, boost::placeholders::_2, 
 					transport_ptr, session_ptr, local_socket_ptr, local_buffer_ptr, remote_socket_ptr)
 		);
 	
@@ -377,7 +377,7 @@
 	// start accepting connections on the local socket
 	socket_ptr_t local_socket_ptr(new asio::ip::tcp::socket(transport_ptr->io_service()));
 	acceptor_ptr->async_accept(*local_socket_ptr, boost::bind(&ClientProxy::on_client_connect, this, 
-			asio::placeholders::error, transport_ptr, session_ptr, local_socket_ptr, remote_socket_ptr));
+			boost::placeholders::_1, transport_ptr, session_ptr, local_socket_ptr, remote_socket_ptr));
 }
 
 void ClientProxy::on_client_connect(const asio::error_code& error, 
--- a/plugins/collab/backends/tcp/xp/IOServerHandler.h
+++ b/plugins/collab/backends/tcp/xp/IOServerHandler.h
@@ -76,7 +76,7 @@
  		session_ptr.reset(new Session(io_service, m_ef));
 		m_pAcceptor->async_accept(session_ptr->getSocket(),
 			boost::bind(&IOServerHandler::handleAsyncAccept,
-				this, asio::placeholders::error));
+				this, boost::placeholders::_1));
 	}
 
 private:
--- a/plugins/collab/backends/tcp/xp/Session.h
+++ b/plugins/collab/backends/tcp/xp/Session.h
@@ -96,7 +96,7 @@
 		packet_data = 0; // just to be sure we'll never touch a datablock we might have read before
 		asio::async_read(socket,
 			asio::buffer(&packet_size, 4),
-			boost::bind(&Session::asyncReadHeaderHandler, shared_from_this(), asio::placeholders::error, asio::placeholders::bytes_transferred));
+			boost::bind(&Session::asyncReadHeaderHandler, shared_from_this(), boost::placeholders::_1, boost::placeholders::_2));
 	}
 
 	void asyncWrite(int size, const char* data)
@@ -117,7 +117,7 @@
 			UT_DEBUGMSG(("sending datablock of length: %d\n", packet_size_write));
 			asio::async_write(socket,
 				asio::buffer(&packet_size_write, 4),
-				boost::bind(&Session::asyncWriteHeaderHandler, shared_from_this(), asio::placeholders::error));
+				boost::bind(&Session::asyncWriteHeaderHandler, shared_from_this(), boost::placeholders::_1));
 		}
 	}
 
@@ -185,7 +185,7 @@
 		packet_data = reinterpret_cast<char*>(g_malloc(packet_size));
 		asio::async_read(socket,
 			asio::buffer(packet_data, packet_size),
-			boost::bind(&Session::asyncReadHandler, shared_from_this(), asio::placeholders::error, asio::placeholders::bytes_transferred));
+			boost::bind(&Session::asyncReadHandler, shared_from_this(), boost::placeholders::_1, boost::placeholders::_2));
 	}
 
 	void asyncReadHandler(const asio::error_code& error,
@@ -223,7 +223,7 @@
 		// write the packet body
 		asio::async_write(socket,
 			asio::buffer(packet_data_write, packet_size_write),
-			boost::bind(&Session::asyncWriteHandler, shared_from_this(), asio::placeholders::error));
+			boost::bind(&Session::asyncWriteHandler, shared_from_this(), boost::placeholders::_1));
 	}
 
 	void asyncWriteHandler(const asio::error_code& ec)
@@ -249,7 +249,7 @@
 
 			asio::async_write(socket,
 				asio::buffer(&packet_size_write, 4),
-				boost::bind(&Session::asyncWriteHeaderHandler, shared_from_this(), asio::placeholders::error));
+				boost::bind(&Session::asyncWriteHeaderHandler, shared_from_this(), boost::placeholders::_1));
 		}
 	}
 
